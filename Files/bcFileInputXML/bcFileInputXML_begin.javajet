<%@ jet 
imports="
    org.talend.core.model.process.INode 
    org.talend.core.model.process.ElementParameterParser 
    org.talend.core.model.metadata.IMetadataTable 
    org.talend.core.model.metadata.IMetadataColumn 
    org.talend.core.model.process.IConnection
    org.talend.core.model.process.IConnectionCategory
    org.talend.designer.codegen.config.CodeGeneratorArgument
    java.util.Map
    java.util.List
    org.talend.core.model.metadata.types.JavaTypesManager
	org.talend.core.model.metadata.types.JavaType
" 
%>

<%
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode)codeGenArgument.getArgument();

String cid = node.getUniqueName();
        
List<Map<String, String>> mapping = (List<Map<String,String>>)ElementParameterParser.getObjectValueXML(node, "__MAPPING__");
String encoding = ElementParameterParser.getValue(node, "__ENCODING__");
String loopQuery = ElementParameterParser.getValue(node, "__LOOP_QUERY__"); 

String filename = ElementParameterParser.getValue(node, "__FILENAME__");

String ignore_NS_Str = ElementParameterParser.getValue(node, "__IGNORE_NS__");
String tmp_filename = ElementParameterParser.getValue(node, "__TMP_FILENAME__");

String useSeparator = ElementParameterParser.getValue(node, "__USE_SEPARATOR__");
String fieldSeparator = ElementParameterParser.getValue(node, "__FIELD_SEPARATOR__");

String limit = ElementParameterParser.getValue(node, "__LIMIT__");
if (("").equals(limit)) {
	limit = "-1";
}

String dieOnErrorStr = ElementParameterParser.getValue(node, "__DIE_ON_ERROR__");
boolean dieOnError = (dieOnErrorStr!=null&&!("").equals(dieOnErrorStr))?("true").equals(dieOnErrorStr):false;

String advancedSeparatorStr = ElementParameterParser.getValue(node, "__ADVANCED_SEPARATOR__");
boolean advancedSeparator = (advancedSeparatorStr!=null&&!("").equals(advancedSeparatorStr))?("true").equals(advancedSeparatorStr):false;
String thousandsSeparator = ElementParameterParser.getValueWithJavaType(node, "__THOUSANDS_SEPARATOR__", JavaTypesManager.CHARACTER);
String decimalSeparator = ElementParameterParser.getValueWithJavaType(node, "__DECIMAL_SEPARATOR__", JavaTypesManager.CHARACTER);

String mode = ElementParameterParser.getValue(node, "__GENERATION_MODE__");
%>
int nb_line_<%=cid%> = 0;
<%
// *** Xerces *** //
if(("Xerces").equals(mode)){
%>
class TalendPrefixResolver_<%=cid%> implements com.sun.org.apache.xml.internal.utils.PrefixResolver {

    private java.util.Map<String, String> map = new java.util.HashMap<String, String>();
    
	private java.util.List<String> defualtNSPath = new java.util.ArrayList<String>();
	
    public String getBaseIdentifier() {
        return null;
    }

    public String getNamespaceForPrefix(String prefix) {
        if (("xml").equals(prefix)) {
            return com.sun.org.apache.xml.internal.utils.Constants.S_XMLNAMESPACEURI;
        } else {
            return map.get(prefix);
        }
    }

    public String getNamespaceForPrefix(String prefix, org.w3c.dom.Node context) {
        return getNamespaceForPrefix(prefix);
    }

    public boolean handlesNullPrefixes() {
        return false;
    }

    public boolean countNSMap(org.w3c.dom.Node el) {
    	boolean hasDefaultPrefix = false;
        if (el.getNodeType() == org.w3c.dom.Node.ELEMENT_NODE) {
            org.w3c.dom.NamedNodeMap attris = el.getAttributes();
            for (int i = 0; i < attris.getLength(); i++) {
                org.w3c.dom.Node attr = attris.item(i);
                String aname = attr.getNodeName();
                if (aname.startsWith("xmlns")) {
                    int index = aname.indexOf(":");
                    if(index > 0){
                    	aname = aname.substring(index + 1);
                    }else{
                    	aname = "pre"+defualtNSPath.size();
                    	hasDefaultPrefix = true;
                    	String path = "";
                    	org.w3c.dom.Node elTmp = el;
                    	while(elTmp!=null && !(elTmp instanceof org.w3c.dom.Document)){
							path = "/"+elTmp.getNodeName()+path;
                    		elTmp = elTmp.getParentNode();
                    	}
                        defualtNSPath.add(path);
                    }
                    map.put(aname, attr.getNodeValue());
                }
            }
        }
        org.w3c.dom.NodeList nodeList = el.getChildNodes();
        for (int i = 0; i < nodeList.getLength(); i++) {
            hasDefaultPrefix = hasDefaultPrefix | countNSMap(nodeList.item(i));
        }
        return hasDefaultPrefix;
    }
    
    public int[] getDefaulNSIndex(String path, String loopPath){
		String fullPath = loopPath;
    	if(!path.equals(fullPath)){
        	for (String tmp : path.split("/")) {
        		if (("..").equals(tmp)) {
                    fullPath = fullPath.substring(0, fullPath.lastIndexOf("/"));
                } else {
                    fullPath += "/" + tmp;
                }
        	}
        }
    	int[] indexs = new int[fullPath.split("/").length - 1];
        java.util.Arrays.fill(indexs, -1);
        int length = 0;
        for (int i = 0; i < defualtNSPath.size(); i++) {
            if (defualtNSPath.get(i).length() > length && fullPath.startsWith(defualtNSPath.get(i))) {
                java.util.Arrays.fill(indexs, defualtNSPath.get(i).split("/").length - 2, indexs.length, i);
                length = defualtNSPath.get(i).length();
            }
        }
    	return indexs;
    }
}

class XML_API_<%=cid%>{

	String loopPath = null;
	boolean hasDefaultNS = false;
	TalendPrefixResolver_<%=cid%> pr = null;
	
	public boolean isDefNull(org.w3c.dom.Node node) throws javax.xml.transform.TransformerException {
        if (node != null && node.getNodeType() == org.w3c.dom.Node.ELEMENT_NODE) {
            return ((org.apache.xerces.xs.ElementPSVI) node).getNil();
        }
        return false;
    }

    public boolean isMissing(org.w3c.dom.Node node) throws javax.xml.transform.TransformerException {
        return node == null ? true : false;
    }

    public boolean isEmpty(org.w3c.dom.Node node) throws javax.xml.transform.TransformerException {
        if (node != null) {
            return node.getTextContent().length() == 0;
        }
        return false;
    }

	public void initXPath(org.w3c.dom.Node root){
		pr= new TalendPrefixResolver_<%=cid%>();
    	hasDefaultNS = pr.countNSMap(root);
	}

//==============add for feature 10753 start================================
	com.sun.org.apache.xpath.internal.objects.XObject obj = null;
	
	public int getNodeType(org.w3c.dom.Node node, String xpath) throws javax.xml.transform.TransformerException{
		obj = com.sun.org.apache.xpath.internal.XPathAPI.eval(node, addDefaultNSPrefix(xpath), pr);
		return obj.getType();
	}
	
	public String getNodeString(org.w3c.dom.Node node, String xpath) throws javax.xml.transform.TransformerException{
		if(obj==null){
			obj = com.sun.org.apache.xpath.internal.XPathAPI.eval(node, addDefaultNSPrefix(xpath), pr);
		}
		return obj.str();
	}

    public org.w3c.dom.Node getSingleNode(org.w3c.dom.Node node, String xpath) throws javax.xml.transform.TransformerException {
    	if(obj==null){
        	obj = com.sun.org.apache.xpath.internal.XPathAPI.eval(node, addDefaultNSPrefix(xpath), pr);
        }
        return obj.nodelist().item(0);
    }
//=====================end=================================================

    public org.w3c.dom.NodeList getNodeList(org.w3c.dom.Node node, String xpath) throws javax.xml.transform.TransformerException {
        com.sun.org.apache.xpath.internal.objects.XObject obj = com.sun.org.apache.xpath.internal.XPathAPI.eval(node, addDefaultNSPrefix(xpath), pr);
        return obj.nodelist();
    }
    
    private String addDefaultNSPrefix(String path) {
        if (hasDefaultNS) {
            StringBuffer newPath = new StringBuffer();
            int[] indexs= pr.getDefaulNSIndex(path,loopPath);
            String[] pathStrs = path.split("/");
            for (int i = 0; i < pathStrs.length; i++) {
                String tmp = pathStrs[i];
                if (newPath.length() > 0) {
                    newPath.append("/");
                }
                if (tmp.length() > 0 && tmp.indexOf(":") == -1 && tmp.indexOf(".") == -1 /*&& tmp.indexOf("@") == -1*/) {
                    int index = indexs[i + indexs.length - pathStrs.length];
                    if (index >= 0) {
                    	//==== add by wliu to support both filter and functions==
						if(tmp.indexOf("[")>0 && tmp.indexOf("]")>tmp.indexOf("[")){//include filter
							String tmpStr=replaceElementWithNS(tmp,"pre"+index+":");
							newPath.append(tmpStr);
						}else{
							if(tmp.indexOf("@") != -1 || tmp.indexOf("(")<tmp.indexOf(")")){  // include attribute
								newPath.append(tmp);
							}else{
						//==add end=======	
                        		newPath.append("pre").append(index).append(":").append(tmp);
                        	}
                        }                    
                    } else {
                        newPath.append(tmp);
                    }
                } else {
                    newPath.append(tmp);
                }
            }
            return newPath.toString();
        }
        return path;
    }

	private String matches = "@*\\b[a-z|A-Z|_]+[[-]*\\w]*\\b[^'|^\\(]";
    private java.util.regex.Pattern pattern = java.util.regex.Pattern.compile(matches);
    
	private String replaceElementWithNS(String global, String pre){

        java.util.regex.Matcher match = pattern.matcher(global);
        StringBuffer sb = new StringBuffer();
        match.reset();
        while (match.find()) {
            String group = match.group();
            String tmp = "";
            if (group.toLowerCase().matches("\\b(div|mod|and|or)\\b.*") || group.matches("@.*")) {
                tmp = group;
            } else {
                tmp = tmp + pre + group;
            }
            match.appendReplacement(sb, tmp);
        }
        match.appendTail(sb);
        
        return sb.toString();
	}    

}

<%if("true".equals(useSeparator)){%>
class ContentTool_<%=cid %>{
	public String field_separator=",";//default value
	
	public String getNodeContent(org.w3c.dom.Node node){
		String result=getSubNodeContent(node);
		if(result.equals("")) return "";
		else return result.substring(1);
	}
	
	private String getSubNodeContent(org.w3c.dom.Node node){
		if(node==null) return "";
		
		String tmp=node.getNodeValue();
		
		if(tmp==null){
			tmp="";
		}else{
			tmp=field_separator+tmp;
		}
		
		if(node.hasChildNodes()){
			org.w3c.dom.NodeList nodeList = node.getChildNodes();
			for(int i=0;i<nodeList.getLength();i++){
				org.w3c.dom.Node tmpNode= nodeList.item(i);	
				tmp=tmp+getSubNodeContent(tmpNode);

			}
		}
		
		return tmp;
	}
}
ContentTool_<%=cid %> contentTool_<%=cid %> = new ContentTool_<%=cid %>();
contentTool_<%=cid %>.field_separator=<%=fieldSeparator %>;
<%}%>

XML_API_<%=cid%> xml_api_<%=cid%> = new XML_API_<%=cid%>();
xml_api_<%=cid%>.loopPath=<%=loopQuery%>;
org.apache.xerces.parsers.DOMParser parser_<%=cid%> = new org.apache.xerces.parsers.DOMParser();
parser_<%=cid%>.setProperty("http://apache.org/xml/properties/dom/document-class-name",
        "org.apache.xerces.dom.PSVIDocumentImpl");
parser_<%=cid%>.setFeature("http://xml.org/sax/features/validation", true);
parser_<%=cid%>.setFeature("http://apache.org/xml/features/validation/schema", true);
parser_<%=cid%>.setFeature("http://apache.org/xml/features/validation/schema-full-checking", true);
parser_<%=cid%>.setFeature("http://xml.org/sax/features/namespaces", true);
parser_<%=cid%>.setErrorHandler(null);
Object filename_<%=cid %> = <%=filename %>;
boolean isValidFile_<%=cid %> = true;
try{
    if(filename_<%=cid %> != null && filename_<%=cid %> instanceof String && filename_<%=cid %>.toString().startsWith("//")){
    	filename_<%=cid %> = filename_<%=cid %>.toString().replaceFirst("//","/");
    }
    if(filename_<%=cid %> instanceof java.io.InputStream){
    	parser_<%=cid%>.parse(new org.xml.sax.InputSource((java.io.InputStream)filename_<%=cid %>));
    }else{
    	java.io.InputStreamReader in_<%=cid %>= new java.io.InputStreamReader(new java.io.FileInputStream(filename_<%=cid %>.toString()),<%=encoding %>);
    	parser_<%=cid%>.parse(new org.xml.sax.InputSource(in_<%=cid %>));
    }
}catch(Exception e){
<%if (dieOnError) {%>
	throw(e);
<%}else{%>
	System.err.println(e.getMessage());
	isValidFile_<%=cid %> = false;
<%}%>
}
if(isValidFile_<%=cid %>){
org.w3c.dom.Document doc_<%=cid%> = parser_<%=cid%>.getDocument();

xml_api_<%=cid%>.initXPath(doc_<%=cid%>);
org.w3c.dom.NodeList nodelist_<%=cid %> = xml_api_<%=cid%>.getNodeList(doc_<%=cid %>,<%=loopQuery%>);

org.w3c.dom.NodeList nl_<%=cid%> = null;
org.w3c.dom.Node node_<%=cid%>  = null;
java.util.List<String> lst_<%=cid%> = null;
String str_<%=cid%> = null;
for (int i_<%=cid %> = 0; i_<%=cid %> < nodelist_<%=cid %>.getLength(); i_<%=cid %>++) {
	org.w3c.dom.Node tmp_<%=cid %> = nodelist_<%=cid %>.item(i_<%=cid %>);
<%
// *** Dom4j *** //
}else if(("Dom4j").equals(mode)){
%>
class NameSpaceTool_<%=cid%> {

    public java.util.HashMap<String, String> xmlNameSpaceMap = new java.util.HashMap<String, String>();
    
	private java.util.List<String> defualtNSPath = new java.util.ArrayList<String>();

    public void countNSMap(org.dom4j.Element el) {
        for (org.dom4j.Namespace ns : (java.util.List<org.dom4j.Namespace>) el.declaredNamespaces()) {
            if (ns.getPrefix().trim().length() == 0) {
                xmlNameSpaceMap.put("pre"+defualtNSPath.size(), ns.getURI());
                String path = "";
                org.dom4j.Element elTmp = el;
                while (elTmp != null) {
                	if (elTmp.getNamespacePrefix() != null && elTmp.getNamespacePrefix().length() > 0) {
                        path = "/" + elTmp.getNamespacePrefix() + ":" + elTmp.getName() + path;
                    } else {
                        path = "/" + elTmp.getName() + path;
                    }
                    elTmp = elTmp.getParent();
                }
                defualtNSPath.add(path);
            } else {
                xmlNameSpaceMap.put(ns.getPrefix(), ns.getURI());
            }

        }
        for (org.dom4j.Element e : (java.util.List<org.dom4j.Element>) el.elements()) {
            countNSMap(e);
        }
    }
    
    public String addDefaultNSPrefix(String path, String loopPath) {
        if (defualtNSPath.size() > 0) {
        	String fullPath = loopPath;
        	if(!path.equals(fullPath)){
            	for (String tmp : path.split("/")) {
            		if (("..").equals(tmp)) {
                        fullPath = fullPath.substring(0, fullPath.lastIndexOf("/"));
                    } else {
                        fullPath += "/" + tmp;
                    }
            	}
            }
        	int[] indexs = new int[fullPath.split("/").length - 1];
            java.util.Arrays.fill(indexs, -1);
            int length = 0;
            for (int i = 0; i < defualtNSPath.size(); i++) {
                if (defualtNSPath.get(i).length() > length && fullPath.startsWith(defualtNSPath.get(i))) {
                    java.util.Arrays.fill(indexs, defualtNSPath.get(i).split("/").length - 2, indexs.length, i);
                    length = defualtNSPath.get(i).length();
                }
            }

            StringBuilder newPath = new StringBuilder();
            String[] pathStrs = path.split("/");
            for (int i = 0; i < pathStrs.length; i++) {
                String tmp = pathStrs[i];
                if (newPath.length() > 0) {
                    newPath.append("/");
                }
                if (tmp.length() > 0 && tmp.indexOf(":") == -1 && tmp.indexOf(".") == -1 /*&& tmp.indexOf("@") == -1*/) {
                    int index = indexs[i + indexs.length - pathStrs.length];
                    if (index >= 0) {
                    	//==== add by wliu to support both filter and functions==
						if(tmp.indexOf("[")>0 && tmp.indexOf("]")>tmp.indexOf("[")){//include filter
							String tmpStr=replaceElementWithNS(tmp,"pre"+index+":");
							newPath.append(tmpStr);
						}else{
							if(tmp.indexOf("@") != -1 || tmp.indexOf("(")<tmp.indexOf(")")){  // include attribute
								newPath.append(tmp);
							}else{
						//==add end=======	
                        		newPath.append("pre").append(index).append(":").append(tmp);
                        	}
                        }                    
                    } else {
                        newPath.append(tmp);
                    }
                } else {
                    newPath.append(tmp);
                }
            }
            return newPath.toString();
        }
        return path;
    }

	private String matches = "@*\\b[a-z|A-Z|_]+[[-]*\\w]*\\b[^'|^\\(]";
    private java.util.regex.Pattern pattern = java.util.regex.Pattern.compile(matches);
    
	private String replaceElementWithNS(String global, String pre){

        java.util.regex.Matcher match = pattern.matcher(global);
        StringBuffer sb = new StringBuffer();
        match.reset();
        while (match.find()) {
            String group = match.group();
            String tmp = "";
            if (group.toLowerCase().matches("\\b(div|mod|and|or)\\b.*") || group.matches("@.*")) {
                tmp = group;
            } else {
                tmp = tmp + pre + group;
            }
            match.appendReplacement(sb, tmp);
        }
        match.appendTail(sb);
        
        return sb.toString();
	}    

}

class XML_API_<%=cid%>{
	public boolean isDefNull(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        if (node != null && node instanceof org.dom4j.Element) {
        	org.dom4j.Attribute attri = ((org.dom4j.Element)node).attribute("nil");
        	if(attri != null && ("true").equals(attri.getText())){
            	return true;
            }
        }
        return false;
    }

    public boolean isMissing(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        return node == null ? true : false;
    }

    public boolean isEmpty(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        if (node != null) {
            return node.getText().length() == 0;
        }
        return false;
    }
}

<%
	if(("true").equals(ignore_NS_Str)){
%>
	class XML_NS_RMV_<%=cid %>{	

		public void removeNamespace(org.dom4j.Document reader,
				org.dom4j.Document writer) {
			org.dom4j.Element elemReader = reader.getRootElement();
			org.dom4j.Element elemTo = writer.addElement(elemReader
					.getName());
			if(elemReader!=null && elemReader.getText()!=null && !"".equals(elemReader.getText())){
				elemTo.setText(elemReader.getText());
			}
			for (org.dom4j.Attribute attri : (List<org.dom4j.Attribute>) elemReader
					.attributes()) {
				elemTo.addAttribute(attri.getName(),attri.getText());
			}
			removeSubNamespace(elemReader, elemTo);
		}

		public void removeSubNamespace(org.dom4j.Element elemFrom,
				org.dom4j.Element elemTo) {
			for (org.dom4j.Element subFrom : (List<org.dom4j.Element>) elemFrom
					.elements()) {
				org.dom4j.Element tmpElemTo = elemTo.addElement(subFrom
						.getName());
				if(subFrom!=null && subFrom.getText()!=null && !"".equals(subFrom.getText())){
					tmpElemTo.setText(subFrom.getText());
				}
				for (org.dom4j.Attribute attri : (List<org.dom4j.Attribute>) subFrom
						.attributes()) {
					tmpElemTo.addAttribute(attri.getName(),attri.getText());
				}
				removeSubNamespace(subFrom, tmpElemTo);
			}
		}
	}
<%
	}
%>

org.dom4j.io.SAXReader reader_<%=cid%> = new org.dom4j.io.SAXReader();
Object filename_<%=cid %> = <%=filename %>;
if(filename_<%=cid %> != null && filename_<%=cid %> instanceof String && filename_<%=cid %>.toString().startsWith("//")){
	filename_<%=cid %> = filename_<%=cid %>.toString().replaceFirst("//","/");
}

<%
	if(("true").equals(ignore_NS_Str)){
%>
org.dom4j.Document doc_reader_<%=cid %> = null;
if(filename_<%=cid %> instanceof java.io.InputStream){
	doc_reader_<%=cid %> = reader_<%=cid %>.read((java.io.InputStream)filename_<%=cid %>);
}else{
	doc_reader_<%=cid %> = reader_<%=cid %>.read(new java.io.File(filename_<%=cid %>.toString()).toURI().toString());
}
org.dom4j.Document doc_tmp_<%=cid %> = org.dom4j.DocumentHelper.createDocument();
org.dom4j.io.OutputFormat format_<%=cid %> = org.dom4j.io.OutputFormat.createPrettyPrint();
format_<%=cid %>.setTrimText(false);
format_<%=cid %>.setEncoding(<%=encoding %>);

new XML_NS_RMV_<%=cid %>().removeNamespace(doc_reader_<%=cid %>,doc_tmp_<%=cid %>);

doc_reader_<%=cid %>.clearContent();
doc_reader_<%=cid %> = null;

java.io.FileOutputStream stream_<%=cid %> = new java.io.FileOutputStream(<%=tmp_filename %>);
org.dom4j.io.XMLWriter output_<%=cid %> = new org.dom4j.io.XMLWriter(stream_<%=cid %>, format_<%=cid %>);
output_<%=cid %>.write(doc_tmp_<%=cid %>);
output_<%=cid %>.close();

filename_<%=cid %> = <%=tmp_filename %>;
<%
	}
%>
boolean isValidFile_<%=cid %> = true;
org.dom4j.Document doc_<%=cid%> = null;
try{
	if(filename_<%=cid %> instanceof java.io.InputStream){
		doc_<%=cid%> = reader_<%=cid %>.read((java.io.InputStream)filename_<%=cid %>);
	}else{
		java.io.InputStreamReader in_<%=cid %>= new java.io.InputStreamReader(new java.io.FileInputStream(filename_<%=cid %>.toString()),<%=encoding %>);
		doc_<%=cid%> = reader_<%=cid %>.read(in_<%=cid %>);
	}
}catch(Exception e){
<%if (dieOnError) {%>
	throw(e);
<%}else{%>
	System.err.println(e.getMessage());
	isValidFile_<%=cid %> = false;
<%}%>
}
if(isValidFile_<%=cid %>){
NameSpaceTool_<%=cid%> nsTool_<%=cid%> = new NameSpaceTool_<%=cid%>();
nsTool_<%=cid%>.countNSMap(doc_<%=cid%>.getRootElement());
java.util.HashMap<String,String> xmlNameSpaceMap_<%=cid%> = nsTool_<%=cid%>.xmlNameSpaceMap;  

org.dom4j.XPath x_<%=cid%> = doc_<%=cid%>.createXPath(nsTool_<%=cid%>.addDefaultNSPrefix(<%=loopQuery%>,<%=loopQuery%>));  
x_<%=cid%>.setNamespaceURIs(xmlNameSpaceMap_<%=cid%>); 

java.util.List<org.dom4j.tree.AbstractNode> nodeList_<%=cid%> = (java.util.List<org.dom4j.tree.AbstractNode>)x_<%=cid%>.selectNodes(doc_<%=cid%>);	
XML_API_<%=cid%> xml_api_<%=cid%> = new XML_API_<%=cid%>();
String str_<%=cid %> = "";
org.dom4j.Node node_<%=cid%> = null;
for (org.dom4j.tree.AbstractNode temp_<%=cid%>: nodeList_<%=cid%>) {
	java.util.List<String> lst_<%=cid%> = null;
<%
// *** SAX *** //
}else if(("SAX").equals(mode)){
%>
class XML_API_<%=cid%>{
	public boolean isDefNull(String[] node) throws javax.xml.transform.TransformerException {
        if(node[0] != null && node[1]!=null && ("true").equals(node[1])){
        	return true;
        }
        return false;
    }

    public boolean isMissing(String[] node) throws javax.xml.transform.TransformerException {
        return node[0] == null ? true : false;
    }

    public boolean isEmpty(String[] node) throws javax.xml.transform.TransformerException {
        if(node[0]!=null ){
        	return node[0].length() == 0;
        }
        return false;
    }
}
XML_API_<%=cid%> xml_api_<%=cid%> = new XML_API_<%=cid%>();

String[] queryPaths_<%=cid%> = new String[]{
<%
	boolean first = true;
	for(Map<String,String> path:mapping){
		String query = path.get("QUERY");
%>	
	<%=first?"":","%><%=query %>
<%	
		if(query!=null && query.indexOf("@")<0){
%>		
	,<%=query%>+"/@xsi:nil"
<%
		}
		first=false;
	}
%>
};

boolean[] asXMLs_<%=cid%> = new boolean[]{
<%
	first = true;
	for(Map<String,String> path:mapping){
%>	
	<%=first?"":","%><%="true".equals(path.get("NODECHECK"))||"true".equals(path.get("MULTINODECHECK"))?"true":"false" %>
<%
		String query = path.get("QUERY");
		if(query!=null && query.indexOf("@")<0){
%>		
	,false
<%
		}
		first=false;
	}
%>
};

String str_<%=cid %> = "";
String[] node_<%=cid%> = null;
org.talend.xml.sax.SAXLooper looper_<%=cid%> = new org.talend.xml.sax.SAXLooper(<%=loopQuery%>,queryPaths_<%=cid%>,asXMLs_<%=cid%>);
looper_<%=cid%>.setEncoding(<%=encoding %>);
Object filename_<%=cid %> = <%=filename %>;
if(filename_<%=cid %> != null && filename_<%=cid %> instanceof String && filename_<%=cid %>.toString().startsWith("//")){
	filename_<%=cid %> = filename_<%=cid %>.toString().replaceFirst("//","/");
}
if(filename_<%=cid %> instanceof java.io.InputStream){
	looper_<%=cid%>.parse((java.io.InputStream)filename_<%=cid %>);
}else{
	looper_<%=cid%>.parse(filename_<%=cid %>.toString());
}
java.util.Iterator<java.util.Map<String, String>> it_<%=cid%>  = looper_<%=cid%>.iterator();
while (it_<%=cid%>.hasNext()) {
	java.util.Map<String, String> row_<%=cid%> = it_<%=cid%>.next();
	java.util.regex.Matcher m_<%=cid%>_1 = null;
	java.util.regex.Matcher m_<%=cid%>_2 = null;
	java.util.List<String> lst_<%=cid%> = null;
	int flags = java.util.regex.Pattern.CASE_INSENSITIVE;
	
<%
	if ("UTF-8".equals(encoding)) {
%>
	flags |= java.util.regex.Pattern.UNICODE_CASE;
<%
	}
}
%>
	nb_line_<%=cid%>++;
<%
List< ? extends IConnection> conns = node.getOutgoingSortedConnections();
String firstConnName = "";
List<IMetadataTable> metadatas = node.getMetadataList();
if ((metadatas!=null)&&(metadatas.size()>0)) {
	IMetadataTable metadata = metadatas.get(0);
	if (metadata!=null) {
		List<IMetadataColumn> columns=metadata.getListColumns();
		if (conns!=null) {
//************ add for reject start*****************
		    String rejectConnName = "";
		    List<? extends IConnection> rejectConns = node.getOutgoingConnections("REJECT");
		    if(rejectConns != null && rejectConns.size() > 0) {
		        IConnection rejectConn = rejectConns.get(0);
		        rejectConnName = rejectConn.getName();
		    }
		    List<IMetadataColumn> rejectColumnList = null;
		    IMetadataTable metadataTable = node.getMetadataFromConnector("REJECT");
		    if(metadataTable != null) {
		        rejectColumnList = metadataTable.getListColumns();      
		    }
			for (int i=0;i<conns.size();i++) {
				IConnection connTemp = conns.get(i);
				if (connTemp.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {
%>
	<%=connTemp.getName() %> = null;			
<%
				}
    		}
//***************************end********************
			if (conns.size()>0) { // S_if_a_0_0		
				IConnection conn = conns.get(0);
				firstConnName = conn.getName();
				
				if (conn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) { // add for reject
%>
	boolean whetherReject_<%=cid %> = false;
	<%=firstConnName %> = new <%=conn.getName() %>Struct();
<%
	if(("Dom4j").equals(mode)) {
%>
	java.util.List<org.dom4j.tree.AbstractNode> element_nodeList_<%=cid%> = null;
<%
	}
%>
	try{
<%
				
				for (int i=0;i<mapping.size();i++) { // S_for_a_1_0
					String query = mapping.get(i).get("QUERY");
					String nodeCheck = mapping.get(i).get("NODECHECK");
					String multiNodeCheck = mapping.get(i).get("MULTINODECHECK");
					if(("Xerces").equals(mode)){
%>
		lst_<%=cid%> = new java.util.ArrayList<String>();
		if(xml_api_<%=cid%>.getNodeType(tmp_<%=cid %>,<%=query%>)==com.sun.org.apache.xpath.internal.objects.XObject.CLASS_NODESET){
			node_<%=cid%> = xml_api_<%=cid%>.getSingleNode(tmp_<%=cid %>,<%=query%>);
<%
						if(("true").equals(multiNodeCheck)) {
%>
			nl_<%=cid%> = xml_api_<%=cid%>.getNodeList(tmp_<%=cid %>,<%=query%>);
			for (int i = 0; i < nl_<%=cid%>.getLength(); i++) {
				lst_<%=cid%>.add(nl_<%=cid%>.item(i).getTextContent());
			}
<%
						}
						if("true".equals(useSeparator)){
%>
			if(node_<%=cid %>!=null && node_<%=cid %>.getNodeType()==org.w3c.dom.Node.ELEMENT_NODE && node_<%=cid %>.hasChildNodes()){
				str_<%=cid %> = contentTool_<%=cid %>.getNodeContent(node_<%=cid%>);
			}else{
				str_<%=cid %> = node_<%=cid%>!=null?node_<%=cid%>.getTextContent():"";
			}
<%
						}else{
%>
			str_<%=cid %> = node_<%=cid%>!=null?node_<%=cid%>.getTextContent():"";
<%
						}
%>
		}else{
			node_<%=cid %> = tmp_<%=cid %>;
			str_<%=cid %> = xml_api_<%=cid%>.getNodeString(tmp_<%=cid %>,<%=query%>);
		}
<%
					}else if(("Dom4j").equals(mode)){
%>
		org.dom4j.XPath xTmp<%=i%>_<%=cid%> = temp_<%=cid%>.createXPath(nsTool_<%=cid%>.addDefaultNSPrefix(<%=query%>,<%=loopQuery%>));
		xTmp<%=i%>_<%=cid%>.setNamespaceURIs(xmlNameSpaceMap_<%=cid%>);
		Object obj<%=i%>_<%=cid%> = xTmp<%=i%>_<%=cid%>.evaluate(temp_<%=cid%>);
<%
	if (("true").equals(multiNodeCheck)){
%>
		lst_<%=cid%> = new java.util.ArrayList<String>();
		
		if (obj<%=i%>_<%=cid%> instanceof java.util.List){
			node_<%=cid%> = xTmp<%=i%>_<%=cid%>.selectSingleNode(temp_<%=cid%>);
<%
		if(("true").equals(nodeCheck)){
%>
				str_<%=cid %> = node_<%=cid %>==null?null:node_<%=cid %>.asXML();
<%
		} else{
%>
				str_<%=cid %> = xTmp<%=i%>_<%=cid%>.valueOf(temp_<%=cid%>);
<%
		}
%>
			
			element_nodeList_<%=cid%> = (java.util.List<org.dom4j.tree.AbstractNode>) xTmp<%=i%>_<%=cid%>
								.selectNodes(temp_<%=cid%>);
			
			for (org.dom4j.tree.AbstractNode element_node_<%=cid%> : element_nodeList_<%=cid%>){			
<%
			if(("true").equals(nodeCheck)){
%>
				lst_<%=cid%>.add(element_node_<%=cid%>==null ? null : element_node_<%=cid%>.asXML());
<%
			} else{
%>
				String str_element_node_<%=cid%> = null;
				
				if (xml_api_<%=cid%>.isDefNull(element_node_<%=cid%>)){
					str_element_node_<%=cid%> = null;
				} else if (xml_api_<%=cid%>.isEmpty(element_node_<%=cid%>)){
					str_element_node_<%=cid%> = "";
				} else if (xml_api_<%=cid%>.isMissing(element_node_<%=cid%>)){
					str_element_node_<%=cid%> = null;
				} else {
					str_element_node_<%=cid%> = element_node_<%=cid%>.getStringValue();
				}
				lst_<%=cid%>.add(str_element_node_<%=cid%>);
<%
			}
%>
			}
		}		
		else {
<%
	}
%>
			if(obj<%=i%>_<%=cid%> instanceof String || obj<%=i%>_<%=cid%> instanceof Number){
				node_<%=cid%> = temp_<%=cid%>;
				str_<%=cid %> = String.valueOf(obj<%=i%>_<%=cid%>);
			} else {
				node_<%=cid%> = xTmp<%=i%>_<%=cid%>.selectSingleNode(temp_<%=cid%>);
<%
		if(("true").equals(nodeCheck)){
%>
				str_<%=cid %> = node_<%=cid %>==null?null:node_<%=cid %>.asXML();
<%
		} else {
%>
				str_<%=cid %> = xTmp<%=i%>_<%=cid%>.valueOf(temp_<%=cid%>);
<%
		}
%>
	}
<%
	if (("true").equals(multiNodeCheck)){
%>
		}
<%
	}
%>
<%
					}else if(("SAX").equals(mode)){
%>
			str_<%=cid %> = row_<%=cid%>.get(<%=query%>);
<%
						if(query!=null && query.indexOf("@")<0){
%>
			node_<%=cid%> = new String[]{str_<%=cid %>,row_<%=cid%>.get(<%=query%>+"/@xsi:nil")};
<%
						}else{
%>
			node_<%=cid%> = new String[]{str_<%=cid %>,null};
<%
						}
					}
					for(IMetadataColumn column:columns) {  // S_for_0_1
						if (mapping.get(i).get("SCHEMA_COLUMN")!=null) { // S_if_0_2
							if (column.getLabel().equals(mapping.get(i).get("SCHEMA_COLUMN"))) { // S_if_0_3
								String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getTalendType(), column.isNullable());
								JavaType javaType = JavaTypesManager.getJavaTypeFromId(column.getTalendType());
								String patternValue = column.getPattern() == null || column.getPattern().trim().length() == 0 ? null : column.getPattern();
								
								boolean isNotSetDefault = false;
								String defaultValue=column.getDefault();
								if(defaultValue!=null){
									isNotSetDefault = defaultValue.length()==0;
								}else{
									isNotSetDefault=true;
								}
								
								if(("Dom4j").equals(mode) && ("true").equals(multiNodeCheck)
									&& (javaType == JavaTypesManager.LIST)){
%>
								<%=conn.getName() %>.<%=column.getLabel() %> = lst_<%=cid %>;
<%
									continue;
								}
								if(("Dom4j").equals(mode) && ("true").equals(nodeCheck)){
%>
								<%=conn.getName() %>.<%=column.getLabel() %> = str_<%=cid %>;
<%
									continue;
								}
								if(("Xerces").equals(mode) && ("true").equals(multiNodeCheck)
									&& (javaType == JavaTypesManager.LIST)) {
%>
								<%=conn.getName() %>.<%=column.getLabel() %> = lst_<%=cid %>;
<%
										continue;
								}
								
								if(javaType == JavaTypesManager.STRING){
									if(column.isNullable()){
%>
									if(xml_api_<%=cid%>.isDefNull(node_<%=cid%>)){
											<%=conn.getName() %>.<%=column.getLabel() %> =null;
									}else if(xml_api_<%=cid%>.isEmpty(node_<%=cid%>)){
										<%=conn.getName() %>.<%=column.getLabel() %> ="";
									}else if(xml_api_<%=cid%>.isMissing(node_<%=cid%> )){ 
										<%=conn.getName() %>.<%=column.getLabel() %> =<%=isNotSetDefault?null:column.getDefault()%>;
									}else{
<%
									}else{ // column.isNullable()
%>
									if(xml_api_<%=cid%>.isEmpty(node_<%=cid%>)){
										<%=conn.getName() %>.<%=column.getLabel() %> ="";
									}else if(xml_api_<%=cid%>.isMissing(node_<%=cid%> )){ 
										<%=conn.getName() %>.<%=column.getLabel() %> =<%=isNotSetDefault?JavaTypesManager.getDefaultValueFromJavaType(typeToGenerate):column.getDefault()%>;
									}else{
<%
									}
								}else { // other type
									if(column.isNullable()){
%>	
										if(xml_api_<%=cid%>.isDefNull(node_<%=cid%>)){
											<%=conn.getName() %>.<%=column.getLabel() %> =null;
										}else if(xml_api_<%=cid%>.isEmpty(node_<%=cid%>) || xml_api_<%=cid%>.isMissing(node_<%=cid%>)){
											<%=conn.getName() %>.<%=column.getLabel() %>=<%=isNotSetDefault?null:column.getDefault()%>;
										}else{
<%
								  	}else{ // column.isNullable()
%>
										if(xml_api_<%=cid%>.isMissing(node_<%=cid%>) || xml_api_<%=cid%>.isEmpty(node_<%=cid%>)){
											<%=conn.getName() %>.<%=column.getLabel() %> =<%=isNotSetDefault?JavaTypesManager.getDefaultValueFromJavaType(typeToGenerate):column.getDefault()%>;
										} else {
<%
									}
								}
								
								if(("SAX").equals(mode) && ("true").equals(multiNodeCheck)
									&& (javaType == JavaTypesManager.LIST) && (query.indexOf("@")<0)) {
%>
								lst_<%=cid %> = new java.util.ArrayList<String>();
								m_<%=cid%>_1 = java.util.regex.Pattern
												.compile("(<" + <%=query%> + ".*?>.*?</" + <%=query%> + ">)+?", flags)
												.matcher(str_<%=cid %>);
												
								while (m_<%=cid%>_1.find()){
									String element_str_<%=cid%>_1 = str_<%=cid %>
																	.substring(m_<%=cid%>_1.start(), m_<%=cid%>_1.end());																
<%
										if(!("true").equals(nodeCheck)){
%>									
									m_<%=cid%>_2 = java.util.regex.Pattern
													.compile("<" + <%=query%> + ".*?>(.*?)</" + <%=query%> + ">", flags)
													.matcher(element_str_<%=cid%>_1);
									if (m_<%=cid%>_2.matches()){
										lst_<%=cid %>.add(m_<%=cid%>_2.group(1));
									}
<%
										} else {
%>
									lst_<%=cid %>.add(element_str_<%=cid%>_1);
<%
										}
%>
								}
								<%=conn.getName() %>.<%=column.getLabel() %> = lst_<%=cid %>;
							}
<%
									continue;
								}
								else if (javaType == JavaTypesManager.STRING || javaType == JavaTypesManager.OBJECT) {
%>
		<%=conn.getName() %>.<%=column.getLabel() %> = str_<%=cid %>;
<%
								} else if (javaType == JavaTypesManager.DATE) {
%>
		<%=conn.getName() %>.<%=column.getLabel() %> = ParserUtils.parseTo_Date(str_<%=cid %>, <%= patternValue %>);
<%  
								} else if(javaType == JavaTypesManager.BYTE_ARRAY){ 
%>							
		<%=conn.getName() %>.<%=column.getLabel() %> = str_<%=cid %>.getBytes(<%=encoding %>);
<%
								} else if(advancedSeparator && JavaTypesManager.isNumberType(javaType)) { 
%>
		<%=conn.getName() %>.<%=column.getLabel() %> = ParserUtils.parseTo_<%= typeToGenerate %>(ParserUtils.parseTo_Number(str_<%=cid %>, <%= thousandsSeparator %>, <%= decimalSeparator %>));
<%
								} else {
%>
		<%=conn.getName() %>.<%=column.getLabel() %> = ParserUtils.parseTo_<%= typeToGenerate %>(str_<%=cid %>);
<%
								}
%>
	}
<%
							} //S_if_1_2
						} // S_if_1_1
					} // S_for_1_0
				} // S_for_a_0_1
%>
<%if(rejectConnName.equals(firstConnName)) {%> <%=firstConnName %> = null; <%}%>
			
    } catch (Exception e) {
        whetherReject_<%=cid%> = true;
<%
        if (dieOnError) {
            %>
            throw(e);
            <%
        } else {
            if(!("").equals(rejectConnName)&&!rejectConnName.equals(firstConnName)&&rejectColumnList != null && rejectColumnList.size() > 0) {

                %>
                    <%=rejectConnName %> = new <%=rejectConnName %>Struct();
                <%
                for(IMetadataColumn column : metadata.getListColumns()) {
                    %>
                    <%=rejectConnName%>.<%=column.getLabel()%> = <%=firstConnName%>.<%=column.getLabel()%>;
                    <%
                }
                %>
                <%=rejectConnName%>.errorMessage = e.getMessage() + " - Line: " + tos_count_<%=node.getUniqueName() %>;
                <%=firstConnName %> = null;
                <%
            } else if(("").equals(rejectConnName)){
                %>
                System.err.println(e.getMessage());
                <%=firstConnName %> = null;
                <%
            } else if(rejectConnName.equals(firstConnName)){%>
            	<%=rejectConnName%>.errorMessage = e.getMessage() + " - Line: " + tos_count_<%=node.getUniqueName() %>;
          <%}
		}
        %>
    }
<%
				} //if (conn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA))
			} // S_if_a_1_1

//***********************************
			if (conns.size()>0) {	
				boolean isFirstEnter = true;
				for (int i=0;i<conns.size();i++) {
					IConnection tmpconn = conns.get(i);
					if ((tmpconn.getName().compareTo(firstConnName)!=0)&&(tmpconn.getName().compareTo(rejectConnName)!=0)&&(tmpconn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA))) {
%>
		<% if(isFirstEnter) {%>if(!whetherReject_<%=cid%>) { <% isFirstEnter = false; } %>      
             if(<%=tmpconn.getName() %> == null){ 
            	 <%=tmpconn.getName() %> = new <%=tmpconn.getName() %>Struct();
             }
<%
			    	 	for (IMetadataColumn column: metadata.getListColumns()) {
%>
	    	 <%=tmpconn.getName() %>.<%=column.getLabel() %> = <%=firstConnName %>.<%=column.getLabel() %>;    				
<%
				 		}
					}
				}
%>
		<% if(!isFirstEnter) {%> } <% } %>	
<%
			}
//***********************************

		} // if(conn!=null)
		
		// limit
		if (limit.compareTo("-1")!=0) {
%>
	
	if (nb_line_<%=cid %>><%=limit %>) {
		break;
	}
<% 
		}
	}// if (metadata!=null)
} //if ((metadatas!=null)&&(metadatas.size()>0))
%>
			
